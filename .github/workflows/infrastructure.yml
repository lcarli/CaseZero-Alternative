name: 🏗️ Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy infrastructure to'
        required: true
        type: choice
        options:
        - development
        - production
      action:
        description: 'Action to perform'
        required: true
        type: choice
        default: 'deploy'
        options:
        - deploy
        - validate
        - destroy
      confirm_destroy:
        description: 'Type "CONFIRM" to destroy resources (required for destroy action)'
        required: false
        default: ''

env:
  AZURE_RESOURCE_GROUP_DEV: casezero-dev-rg
  AZURE_RESOURCE_GROUP_PROD: casezero-prod-rg
  BICEP_FILE_PATH: infrastructure/bicep/main.bicep

jobs:
  validate-inputs:
    name: ✅ Validate Inputs
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Validate destroy confirmation
        if: github.event.inputs.action == 'destroy'
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "CONFIRM" ]; then
            echo "❌ Destroy action requires typing 'CONFIRM' in the confirmation field"
            exit 1
          fi
          echo "✅ Destroy action confirmed"

  validate-bicep:
    name: 🔍 Validate BICEP Templates
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.environment == 'production' && secrets.AZURE_CREDENTIALS_PROD || secrets.AZURE_CREDENTIALS_DEV }}

      - name: 🔍 Validate BICEP syntax
        run: |
          echo "Validating BICEP template syntax..."
          az bicep build --file ${{ env.BICEP_FILE_PATH }}

      - name: 🔍 Validate deployment template
        run: |
          RESOURCE_GROUP="${{ github.event.inputs.environment == 'production' && env.AZURE_RESOURCE_GROUP_PROD || env.AZURE_RESOURCE_GROUP_DEV }}"
          PARAMS_FILE="infrastructure/bicep/parameters.${{ github.event.inputs.environment == 'production' && 'prod' || 'dev' }}.json"
          
          echo "Validating deployment to resource group: $RESOURCE_GROUP"
          
          # Create resource group if it doesn't exist
          az group create --name $RESOURCE_GROUP --location "East US 2" --tags Environment=${{ github.event.inputs.environment }} Project=CaseZero ManagedBy=GitHub-Actions
          
          # Validate the deployment
          az deployment group validate \
            --resource-group $RESOURCE_GROUP \
            --template-file ${{ env.BICEP_FILE_PATH }} \
            --parameters @$PARAMS_FILE

      - name: 📊 Generate What-If Analysis
        if: github.event.inputs.action != 'validate'
        run: |
          RESOURCE_GROUP="${{ github.event.inputs.environment == 'production' && env.AZURE_RESOURCE_GROUP_PROD || env.AZURE_RESOURCE_GROUP_DEV }}"
          PARAMS_FILE="infrastructure/bicep/parameters.${{ github.event.inputs.environment == 'production' && 'prod' || 'dev' }}.json"
          
          echo "Generating What-If analysis..."
          az deployment group what-if \
            --resource-group $RESOURCE_GROUP \
            --template-file ${{ env.BICEP_FILE_PATH }} \
            --parameters @$PARAMS_FILE \
            --result-format FullResourcePayloads

  deploy-infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-bicep]
    if: github.event.inputs.action == 'deploy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.environment == 'production' && secrets.AZURE_CREDENTIALS_PROD || secrets.AZURE_CREDENTIALS_DEV }}

      - name: 🏗️ Deploy BICEP Template
        run: |
          RESOURCE_GROUP="${{ github.event.inputs.environment == 'production' && env.AZURE_RESOURCE_GROUP_PROD || env.AZURE_RESOURCE_GROUP_DEV }}"
          PARAMS_FILE="infrastructure/bicep/parameters.${{ github.event.inputs.environment == 'production' && 'prod' || 'dev' }}.json"
          DEPLOYMENT_NAME="casezero-infrastructure-$(date +%Y%m%d%H%M%S)"
          
          echo "Deploying infrastructure to: $RESOURCE_GROUP"
          echo "Using parameters file: $PARAMS_FILE"
          echo "Deployment name: $DEPLOYMENT_NAME"
          
          # Deploy the infrastructure
          az deployment group create \
            --resource-group $RESOURCE_GROUP \
            --template-file ${{ env.BICEP_FILE_PATH }} \
            --parameters @$PARAMS_FILE \
            --name $DEPLOYMENT_NAME \
            --verbose

      - name: 📤 Export Deployment Outputs
        id: deployment-outputs
        run: |
          RESOURCE_GROUP="${{ github.event.inputs.environment == 'production' && env.AZURE_RESOURCE_GROUP_PROD || env.AZURE_RESOURCE_GROUP_DEV }}"
          
          echo "Extracting deployment outputs..."
          
          # Get the latest deployment
          DEPLOYMENT_NAME=$(az deployment group list --resource-group $RESOURCE_GROUP --query "[0].name" -o tsv)
          
          # Extract outputs
          WEB_APP_NAME=$(az deployment group show --resource-group $RESOURCE_GROUP --name $DEPLOYMENT_NAME --query "properties.outputs.webAppName.value" -o tsv)
          WEB_APP_URL=$(az deployment group show --resource-group $RESOURCE_GROUP --name $DEPLOYMENT_NAME --query "properties.outputs.webAppUrl.value" -o tsv)
          STATIC_WEB_APP_NAME=$(az deployment group show --resource-group $RESOURCE_GROUP --name $DEPLOYMENT_NAME --query "properties.outputs.staticWebAppName.value" -o tsv)
          STATIC_WEB_APP_URL=$(az deployment group show --resource-group $RESOURCE_GROUP --name $DEPLOYMENT_NAME --query "properties.outputs.staticWebAppUrl.value" -o tsv)
          SQL_SERVER_FQDN=$(az deployment group show --resource-group $RESOURCE_GROUP --name $DEPLOYMENT_NAME --query "properties.outputs.sqlServerFqdn.value" -o tsv)
          
          echo "web-app-name=$WEB_APP_NAME" >> $GITHUB_OUTPUT
          echo "web-app-url=$WEB_APP_URL" >> $GITHUB_OUTPUT
          echo "static-web-app-name=$STATIC_WEB_APP_NAME" >> $GITHUB_OUTPUT
          echo "static-web-app-url=$STATIC_WEB_APP_URL" >> $GITHUB_OUTPUT
          echo "sql-server-fqdn=$SQL_SERVER_FQDN" >> $GITHUB_OUTPUT

      - name: 🔧 Configure Application Settings
        run: |
          WEB_APP_NAME="${{ steps.deployment-outputs.outputs.web-app-name }}"
          RESOURCE_GROUP="${{ github.event.inputs.environment == 'production' && env.AZURE_RESOURCE_GROUP_PROD || env.AZURE_RESOURCE_GROUP_DEV }}"
          
          echo "Configuring additional application settings for: $WEB_APP_NAME"
          
          # Set GitHub repository URL for Static Web App
          az staticwebapp appsettings set \
            --name "${{ steps.deployment-outputs.outputs.static-web-app-name }}" \
            --setting-names "BACKEND_API_URL=${{ steps.deployment-outputs.outputs.web-app-url }}"

      - name: 🏥 Verify Deployment
        run: |
          echo "Verifying deployment..."
          
          # Check if resources are accessible
          WEB_APP_URL="${{ steps.deployment-outputs.outputs.web-app-url }}"
          STATIC_WEB_APP_URL="${{ steps.deployment-outputs.outputs.static-web-app-url }}"
          
          echo "Backend URL: $WEB_APP_URL"
          echo "Frontend URL: $STATIC_WEB_APP_URL"
          
          # Wait a moment for services to start
          sleep 30
          
          # Basic connectivity test
          if curl -f -s -o /dev/null "$WEB_APP_URL"; then
            echo "✅ Backend is responding"
          else
            echo "⚠️ Backend may not be fully ready yet (this is normal for new deployments)"
          fi
          
          if curl -f -s -o /dev/null "$STATIC_WEB_APP_URL"; then
            echo "✅ Frontend is responding"
          else
            echo "⚠️ Frontend may not be fully ready yet (this is normal for new deployments)"
          fi

      - name: 📋 Deployment Summary
        run: |
          echo "## 🚀 Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group:** ${{ github.event.inputs.environment == 'production' && env.AZURE_RESOURCE_GROUP_PROD || env.AZURE_RESOURCE_GROUP_DEV }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Application URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API:** ${{ steps.deployment-outputs.outputs.web-app-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend:** ${{ steps.deployment-outputs.outputs.static-web-app-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ Resources Created" >> $GITHUB_STEP_SUMMARY
          echo "- **App Service:** ${{ steps.deployment-outputs.outputs.web-app-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Static Web App:** ${{ steps.deployment-outputs.outputs.static-web-app-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SQL Server:** ${{ steps.deployment-outputs.outputs.sql-server-fqdn }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Cost Optimization Features" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-scaling:** Enabled based on environment" >> $GITHUB_STEP_SUMMARY
          echo "- **Backup:** ${{ github.event.inputs.environment == 'production' && 'Enabled' || 'Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Zone Redundancy:** ${{ github.event.inputs.environment == 'production' && 'Enabled' || 'Disabled' }}" >> $GITHUB_STEP_SUMMARY

  destroy-infrastructure:
    name: 🔥 Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.environment == 'production' && secrets.AZURE_CREDENTIALS_PROD || secrets.AZURE_CREDENTIALS_DEV }}

      - name: 🔥 Delete Resource Group
        run: |
          RESOURCE_GROUP="${{ github.event.inputs.environment == 'production' && env.AZURE_RESOURCE_GROUP_PROD || env.AZURE_RESOURCE_GROUP_DEV }}"
          
          echo "⚠️ WARNING: About to delete resource group: $RESOURCE_GROUP"
          echo "This action is IRREVERSIBLE and will delete ALL resources in the group!"
          
          # Confirm the resource group exists
          if az group exists --name $RESOURCE_GROUP; then
            echo "Resource group $RESOURCE_GROUP exists. Proceeding with deletion..."
            
            # Delete the resource group and all its resources
            az group delete --name $RESOURCE_GROUP --yes --no-wait
            
            echo "🔥 Resource group deletion initiated. This may take several minutes to complete."
            echo "You can monitor the deletion progress in the Azure Portal."
          else
            echo "Resource group $RESOURCE_GROUP does not exist. Nothing to delete."
          fi

  notify-teams:
    name: 📢 Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, destroy-infrastructure]
    if: always() && (needs.deploy-infrastructure.result != 'skipped' || needs.destroy-infrastructure.result != 'skipped')
    
    steps:
      - name: 📢 Send Teams Notification
        if: always()
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
          title: "🏗️ CaseZero Infrastructure ${{ github.event.inputs.action == 'destroy' && 'Destroyed' || 'Deployed' }}"
          summary: "Infrastructure ${{ github.event.inputs.action }} completed"
          text: |
            **Action:** ${{ github.event.inputs.action }}
            **Environment:** ${{ github.event.inputs.environment }}
            **Status:** ${{ (needs.deploy-infrastructure.result == 'success' || needs.destroy-infrastructure.result == 'success') && '✅ Success' || '❌ Failed' }}
            **Triggered by:** ${{ github.actor }}
            **Repository:** ${{ github.repository }}
            
            ${{ github.event.inputs.action == 'deploy' && '🚀 Infrastructure is ready for application deployment!' || '🔥 Infrastructure has been destroyed.' }}
          theme_color: ${{ (needs.deploy-infrastructure.result == 'success' || needs.destroy-infrastructure.result == 'success') && '00FF00' || 'FF0000' }}