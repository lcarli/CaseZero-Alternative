name: üöÄ Deploy to PRODUCTION Environment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type "CONFIRM" to deploy to production'
        required: true
        default: ''

env:
  AZURE_WEBAPP_NAME: casezero-prod
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'

jobs:
  validate-inputs:
    name: ‚úÖ Validate Production Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: üîç Validate confirmation input
        run: |
          if [ "${{ github.event.inputs.confirm_production }}" != "CONFIRM" ]; then
            echo "‚ùå Production deployment requires typing 'CONFIRM' in the confirmation field"
            exit 1
          fi
          echo "‚úÖ Production deployment confirmed"

  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: 'csharp,javascript'

      - name: üîß Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üî® Build for analysis
        run: |
          dotnet restore ./backend/CaseZeroApi
          dotnet build ./backend/CaseZeroApi --no-restore

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: üîç Run dependency audit (Frontend)
        run: npm audit --audit-level high
        working-directory: ./frontend

      - name: üîç Check .NET vulnerabilities
        run: dotnet list package --vulnerable --include-transitive
        working-directory: ./backend/CaseZeroApi

  build-and-test:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: üì¶ Install frontend dependencies
        run: npm ci
        working-directory: ./frontend

      - name: üîç Lint frontend code
        run: npm run lint
        working-directory: ./frontend

      - name: üî® Build frontend
        run: npm run build
        working-directory: ./frontend

      - name: üì¶ Restore backend dependencies
        run: dotnet restore
        working-directory: ./backend/CaseZeroApi

      - name: üî® Build backend
        run: dotnet build --no-restore --configuration Release
        working-directory: ./backend/CaseZeroApi

      - name: üß™ Run unit tests
        run: dotnet test --no-build --configuration Release --verbosity normal --logger trx
        working-directory: ./backend/CaseZeroApi.Tests

      - name: üß™ Run integration tests
        run: dotnet test --configuration Release --verbosity normal --logger trx
        working-directory: ./backend/CaseZeroApi.IntegrationTests

      - name: üß™ Run frontend tests
        run: npm run test:run
        working-directory: ./frontend

      - name: ‚úÖ Validate cases
        run: |
          chmod +x ./validate_case.sh
          ./validate_case.sh Case001

      - name: üìä Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: üß™ Production Test Results
          path: '**/TestResults/*.trx'
          reporter: dotnet-trx

      - name: üì¶ Publish backend
        run: dotnet publish -c Release -o ./publish
        working-directory: ./backend/CaseZeroApi

      - name: üì§ Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-production
          path: ./backend/CaseZeroApi/publish

      - name: üì§ Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-production
          path: ./frontend/dist

  await-approval:
    name: üîí Manual Approval Required
    runs-on: ubuntu-latest
    needs: [build-and-test]
    environment: production
    
    steps:
      - name: üîí Manual Approval
        run: |
          echo "üîí This deployment requires manual approval"
          echo "‚úÖ Approved for production deployment"

  deploy-to-prod:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, await-approval]
    environment: production
    
    steps:
      - name: üì• Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-production
          path: ./backend

      - name: üì• Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-production
          path: ./frontend

      - name: üîê Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: üöÄ Deploy Backend to Azure Web App (Staging Slot)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'staging'
          package: ./backend

      - name: üè• Health Check (Staging)
        run: |
          echo "Performing health check on staging slot..."
          sleep 30
          
          STAGING_URL="https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net"
          echo "Checking staging health at: $STAGING_URL/api/health"
          
          for i in {1..10}; do
            if curl -f "$STAGING_URL/api/health" > /dev/null 2>&1; then
              echo "‚úÖ Staging backend is healthy!"
              break
            else
              echo "‚è≥ Attempt $i: Staging not ready yet, waiting..."
              sleep 15
            fi
            
            if [ $i -eq 10 ]; then
              echo "‚ùå Staging health check failed"
              exit 1
            fi
          done

      - name: üîÑ Swap to Production
        run: |
          echo "Swapping staging slot to production..."
          az webapp deployment slot swap \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} \
            --slot staging \
            --target-slot production

      - name: üåê Deploy Frontend to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "./frontend"
          api_location: ""
          output_location: "dist"

      - name: üè• Production Health Check
        run: |
          echo "Performing production health check..."
          sleep 30
          
          PROD_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "Checking production health at: $PROD_URL/api/health"
          
          for i in {1..10}; do
            if curl -f "$PROD_URL/api/health" > /dev/null 2>&1; then
              echo "‚úÖ Production is healthy!"
              break
            else
              echo "‚è≥ Attempt $i: Production not ready yet, waiting..."
              sleep 15
            fi
            
            if [ $i -eq 10 ]; then
              echo "‚ùå Production health check failed"
              # Rollback
              echo "üîÑ Rolling back due to health check failure..."
              az webapp deployment slot swap \
                --name ${{ env.AZURE_WEBAPP_NAME }} \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} \
                --slot production \
                --target-slot staging
              exit 1
            fi
          done

      - name: üìä Post Production Tests
        run: |
          echo "Running post-production smoke tests..."
          
          PROD_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          
          # Test critical endpoints
          echo "Testing critical API endpoints..."
          curl -f "$PROD_URL/api/cases" -H "Accept: application/json" || echo "‚ö†Ô∏è Cases endpoint might require authentication"
          
          echo "‚úÖ Production deployment successful!"

  notify-teams:
    name: üì¢ Notify Teams
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-to-prod]
    if: always()
    
    steps:
      - name: üì¢ Send Teams Notification
        if: always()
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
          title: "üöÄ CaseZero PRODUCTION Deployment"
          summary: "Production deployment completed"
          text: |
            **Status:** ${{ needs.deploy-to-prod.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            **Environment:** Production
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Triggered by:** ${{ github.actor }}
            
            **Application URLs:**
            - Backend: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
            - Frontend: https://casezero.azurestaticapps.net
            
            ${{ needs.deploy-to-prod.result == 'success' && 'üéâ Production is live!' || '‚ö†Ô∏è Please check the deployment logs for issues.' }}
          theme_color: ${{ needs.deploy-to-prod.result == 'success' && '00FF00' || 'FF0000' }}

  create-release:
    name: üì¶ Create Release
    runs-on: ubuntu-latest
    needs: [deploy-to-prod]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## üöÄ Production Release v${{ github.run_number }}
            
            **Deployed on:** ${{ github.event.head_commit.timestamp }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.event.head_commit.author.name }}
            
            ### üìã Changes
            ${{ github.event.head_commit.message }}
            
            ### üîó Application Links
            - **Frontend:** https://casezero.azurestaticapps.net
            - **Backend API:** https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
            
            ### ‚úÖ Deployment Summary
            - ‚úÖ Security scans passed
            - ‚úÖ All tests passed
            - ‚úÖ Manual approval obtained
            - ‚úÖ Health checks passed
            - ‚úÖ Production deployment successful
          draft: false
          prerelease: false